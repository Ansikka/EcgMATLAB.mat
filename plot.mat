% Generate and save synthetic ECG signals
for i = 1:5
    % Normal ECG: Clean sinusoidal + light noise
    signal = sin(2*pi*1*(0:0.001:1)) + 0.05*randn(1,1001);
    save(sprintf('ecg_normal%d.mat', i), 'signal');
end

for i = 1:5
    % Diseased ECG: Noisy + distorted
    signal = sin(2*pi*1*(0:0.001:1)) + 0.4*randn(1,1001);
    signal = signal + 0.2*sin(2*pi*10*(0:0.001:1));
    save(sprintf('ecg_disease%d.mat', i), 'signal');
end
% File list and labels
files = [ ...
    "ecg_normal1.mat", "ecg_normal2.mat", "ecg_normal3.mat", ...
    "ecg_normal4.mat", "ecg_normal5.mat", ...
    "ecg_disease1.mat", "ecg_disease2.mat", "ecg_disease3.mat", ...
    "ecg_disease4.mat", "ecg_disease5.mat"];

labels = [ ...
    "Normal", "Normal", "Normal", "Normal", "Normal", ...
    "Diseased", "Diseased", "Diseased", "Diseased", "Diseased"];

% Initialize
features = zeros(length(files), 8);  % 8 LHOM values

% Extract LHOM
for i = 1:length(files)
    data = load(files{i});
    signal = data.signal;

    % Normalize
    signal = signal - mean(signal);
    signal = signal / std(signal);

    % LHOMs: log of higher-order moments (3 to 10)
    for n = 3:10
        moment_val = mean(signal.^n);
        features(i, n-2) = log(abs(moment_val) + eps);  % avoid log(0)
    end
end

% Table
labels = categorical(labels(:));  % ensure column format
T = array2table(features, 'VariableNames', strcat("LHOM_", string(3:10)));
T.Label = labels;
% Train-Test Split
cv = cvpartition(T.Label, 'HoldOut', 0.3);
trainData = T(training(cv), :);
testData  = T(test(cv), :);

% Model: Random Forest (Bagged Trees)
mdl = fitcensemble(trainData(:,1:end-1), trainData.Label, ...
    'Method', 'Bag', 'NumLearningCycles', 100);

% Predict
predicted = predict(mdl, testData(:,1:end-1));
accuracy = mean(predicted == testData.Label);
fprintf("Accuracy: %.2f%%\n", accuracy*100);
% LHOM scatter plot: Order 3 vs 4
figure;
gscatter(features(:,1), features(:,2), labels, 'rb', 'ox', 10);
xlabel('LHOM Order 3');
ylabel('LHOM Order 4');
title('Log-Higher-Order Moment Feature Scatter');
legend('Normal', 'Diseased');

% Confusion Matrix
figure;
confusionchart(testData.Label, predicted);
title('Classification Confusion Matrix');
skews = zeros(length(files), 1);
kurts = zeros(length(files), 1);

for i = 1:length(files)
    signal = load(files{i}).signal;
    signal = signal - mean(signal);
    signal = signal / std(signal);
    skews(i) = skewness(signal);
    kurts(i) = kurtosis(signal);
end

% Plot
figure;
subplot(1,2,1);
bar(skews); title('Skewness of ECG Signals');
xlabel('Signal Index'); ylabel('Skewness');

subplot(1,2,2);
bar(kurts); title('Kurtosis of ECG Signals');
xlabel('Signal Index'); ylabel('Kurtosis');
